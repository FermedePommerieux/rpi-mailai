#!/usr/bin/env python3
import argparse, getpass, json, os, re, sys, yaml
from datetime import datetime
from pathlib import Path
from typing import Optional
from imapclient import IMAPClient

CFG_PATH = Path(os.environ.get("APP_CONFIG", "/config/config.yml"))
SECRETS_DIR = Path("/config/secrets")
MAIL_TYPES_DIR = Path(os.environ.get("MAIL_TYPES_DIR", "/config/account_types"))

GENERIC_PROMPTS = {
    "important": (
        "Classer dans le dossier Important tout message nécessitant une action rapide, "
        "lié à des responsables, des clients ou des demandes urgentes."
    ),
    "newsletter": (
        "Identifier les newsletters, campagnes marketing, promotions commerciales et les "
        "emails automatisés d'information générique."
    ),
    "projet": (
        "Détecter les emails liés aux projets en cours : échanges d'équipe, comptes rendus, "
        "plans d'action, livrables ou demandes de suivi."
    ),
    "basse": (
        "Repérer les notifications de réseaux sociaux, invitations automatiques et autres "
        "messages de faible priorité."
    ),
    "quarantine": (
        "Utiliser la quarantaine pour tout message ambigu ou incertain afin d'attendre une "
        "revue manuelle."
    ),
    "factures": (
        "Repérer les mails contenant une facture à traiter : expéditeur de type fournisseur, "
        "mention explicite de facture ou facturation et présence d'une pièce jointe PDF."
    ),
}


def _write_mail_types(path: Path, payload: dict):
    payload["updated_at"] = datetime.utcnow().isoformat()
    path.parent.mkdir(parents=True, exist_ok=True)
    tmp = path.with_suffix(path.suffix + ".tmp")
    with open(tmp, "w", encoding="utf-8") as fh:
        json.dump(payload, fh, indent=2, ensure_ascii=False)
    os.replace(tmp, path)


def _sync_targets(payload: dict, mapping_targets: dict, spam_folder: str, quarantine_folder: str):
    for entry in payload.get("types", []):
        key = entry.get("key")
        if key == "spam" and spam_folder:
            entry["target_folder"] = spam_folder
        elif key == "quarantine" and quarantine_folder:
            entry["target_folder"] = quarantine_folder
        elif key in mapping_targets and mapping_targets.get(key):
            entry["target_folder"] = mapping_targets[key]
        elif key == "factures":
            # Default invoices to the project folder if nothing else is set
            if not entry.get("target_folder"):
                entry["target_folder"] = mapping_targets.get("projet") or quarantine_folder or spam_folder


def ensure_mail_types(
    name: str,
    mapping_targets: dict,
    spam_folder: str,
    quarantine_folder: str,
    existing_path: Optional[str] = None,
) -> Path:
    base_payload = {
        "account": name,
        "version": 1,
        "types": [
            {
                "key": "important",
                "label": "Important",
                "enabled": True,
                "target_folder": mapping_targets.get("important"),
                "prompt": GENERIC_PROMPTS["important"],
            },
            {
                "key": "newsletter",
                "label": "Newsletters",
                "enabled": False,
                "target_folder": mapping_targets.get("newsletter"),
                "prompt": GENERIC_PROMPTS["newsletter"],
            },
            {
                "key": "projet",
                "label": "Projets",
                "enabled": False,
                "target_folder": mapping_targets.get("projet"),
                "prompt": GENERIC_PROMPTS["projet"],
            },
            {
                "key": "basse",
                "label": "Faible priorité",
                "enabled": False,
                "target_folder": mapping_targets.get("basse"),
                "prompt": GENERIC_PROMPTS["basse"],
            },
            {
                "key": "quarantine",
                "label": "Quarantaine",
                "enabled": False,
                "target_folder": quarantine_folder,
                "prompt": GENERIC_PROMPTS["quarantine"],
            },
            {
                "key": "factures",
                "label": "Factures à traiter",
                "enabled": False,
                "target_folder": mapping_targets.get("projet") or quarantine_folder,
                "prompt": GENERIC_PROMPTS["factures"],
            },
        ],
    }

    path = Path(existing_path) if existing_path else MAIL_TYPES_DIR / f"{name}.json"
    if path.exists():
        with open(path, "r", encoding="utf-8") as fh:
            payload = json.load(fh)
        # Merge missing defaults without overwriting user customisations
        existing_keys = {t.get("key") for t in payload.get("types", [])}
        for t in base_payload["types"]:
            if t["key"] not in existing_keys:
                payload.setdefault("types", []).append(t)
    else:
        payload = base_payload

    _sync_targets(payload, mapping_targets, spam_folder, quarantine_folder)
    _write_mail_types(path, payload)
    return path

def load_cfg():
    if not CFG_PATH.exists():
        print(f"Config not found: {CFG_PATH}", file=sys.stderr); sys.exit(2)
    with open(CFG_PATH,"r") as f: return yaml.safe_load(f)

def save_cfg(cfg):
    tmp = CFG_PATH.with_suffix(".tmp")
    with open(tmp,"w") as f: yaml.safe_dump(cfg, f, sort_keys=False, allow_unicode=True)
    os.replace(tmp, CFG_PATH)

def norm_name(name:str)->str: return re.sub(r"[^a-zA-Z0-9_-]+","", name.strip())

def find_acc(cfg, name):
    for i,a in enumerate(cfg.get("accounts",[])):
        if a.get("name")==name: return i,a
    return None,None

def test_imap(host, port, ssl, user, pwd):
    with IMAPClient(host, port=int(port), ssl=bool(ssl)) as srv:
        srv.login(user, pwd); srv.select_folder("INBOX", readonly=True)
    return True, None

def _to_str(x):
    if isinstance(x, bytes):
        try: return x.decode('utf-8', 'ignore')
        except: return x.decode('latin-1', 'ignore')
    return x

def detect_mailbox_style(srv):
    folders = srv.list_folders()
    delim_raw = next((d for _f,d,_n in folders if d), '/')
    delim = _to_str(delim_raw) or '/'
    existing = {_to_str(name) for _f,_d,name in folders}
    has_inbox_ns = any(name.upper().startswith(f"INBOX{delim}") for name in existing)
    return delim, has_inbox_ns, existing

def normalize_folder(user_str, delim, has_inbox_ns):
    s = (user_str or "").strip()
    if not s: return s
    up = s.upper()
    if up.startswith("INBOX/") or up.startswith("INBOX."):
        s = s.replace("/", delim).replace(".", delim)
        return s
    s = s.replace("/", delim).replace(".", delim)
    if has_inbox_ns:
        s = f"INBOX{delim}{s}"
    return s

def ensure_folders(srv, targets, existing):
    created=[]
    for box in targets:
        if not box: continue
        if box not in existing:
            try:
                srv.create_folder(box)
                created.append(box)
                existing.add(box)
            except Exception as e:
                print(f"[WARN] create {box}: {e}", file=sys.stderr)
    return created

def add_account(args):
    if not args.host:
        print("[ERROR] --host is required (no default).", file=sys.stderr); sys.exit(2)

    cfg = load_cfg()
    accs = cfg.setdefault("accounts", [])
    name = norm_name(args.name)
    if not name: print("Invalid account name", file=sys.stderr); sys.exit(2)
    if any(a.get("name")==name for a in accs):
        print(f"Account '{name}' already exists.", file=sys.stderr); sys.exit(2)

    SECRETS_DIR.mkdir(parents=True, exist_ok=True)
    secret_file = SECRETS_DIR / f"{name}.pass"

    user = args.user or input("IMAP username (email): ").strip()
    pwd  = args.password or getpass.getpass("IMAP password: ")

    try:
        with IMAPClient(args.host, port=int(args.port), ssl=not args.no_ssl) as srv:
            srv.login(user, pwd)
            delim, has_inbox_ns, existing = detect_mailbox_style(srv)

            spam_f        = args.spam        or "Junk"
            important_f   = args.important   or "Important"
            newsletter_f  = args.newsletter  or "Promotions"
            projet_f      = args.projet      or "Projects"
            basse_f       = args.basse       or "SocialNetwork"
            quarantine_f  = args.quarantine  or "AI/A-REVIEW"

            spam_f_n        = normalize_folder(spam_f,        delim, has_inbox_ns)
            important_f_n   = normalize_folder(important_f,   delim, has_inbox_ns)
            newsletter_f_n  = normalize_folder(newsletter_f,  delim, has_inbox_ns)
            projet_f_n      = normalize_folder(projet_f,      delim, has_inbox_ns)
            basse_f_n       = normalize_folder(basse_f,       delim, has_inbox_ns)
            quarantine_f_n  = normalize_folder(quarantine_f,  delim, has_inbox_ns)

            if not args.no_create_folders:
                to_create = [x for x in [spam_f_n, important_f_n, newsletter_f_n, projet_f_n, basse_f_n, quarantine_f_n] if x]
                created = ensure_folders(srv, to_create, existing)
                if created:
                    print("[OK] Created folders:", ", ".join(created))

            mapping_targets = {
                "important":  important_f_n,
                "newsletter": newsletter_f_n,
                "projet":     projet_f_n,
                "basse":      basse_f_n,
                "quarantine": quarantine_f_n,
            }
    except Exception as e:
        print(f"[ERROR] IMAP connection or folder setup: {e}", file=sys.stderr); sys.exit(1)

    secret_file.write_text(pwd); os.chmod(secret_file, 0o600)

    types_path = ensure_mail_types(name, mapping_targets, spam_f_n, quarantine_f_n)

    new_acc = {
        "name": name,
        "imap": {
            "host": args.host,
            "port": int(args.port),
            "ssl": not args.no_ssl,
            "user": user,
            "password_file": str(secret_file),
        },
        "mode": {
            "auto_move": bool(args.auto_move),
            "auto_spam": bool(args.auto_spam),
        },
        "folders": {
            "inbox": "INBOX",
            "spam":  spam_f_n,
            "targets": mapping_targets
        },
        "mail_types_config": str(types_path),
        "rules": []
    }
    accs.append(new_acc); save_cfg(cfg)

    print(f"[OK] Account '{name}' added ({user}@{args.host}). Secret: {secret_file}")
    print("Folders mapping (normalized):")
    print(f"  Spam        -> {spam_f_n}")
    print(f"  Important   -> {mapping_targets['important']}")
    print(f"  Promotions  -> {mapping_targets['newsletter']}")
    print(f"  Projects    -> {mapping_targets['projet']}")
    print(f"  Social/Low  -> {mapping_targets['basse']}")
    print(f"  Quarantine  -> {mapping_targets['quarantine']}")

def update_account(args):
    cfg = load_cfg(); idx, acc = find_acc(cfg, args.name)
    if acc is None:
        print(f"Account '{args.name}' not found.", file=sys.stderr); sys.exit(2)

    if args.user:  acc["imap"]["user"] = args.user
    if args.host:  acc["imap"]["host"] = args.host
    if args.port:  acc["imap"]["port"] = int(args.port)
    if args.no_ssl is True:   acc["imap"]["ssl"] = False
    if args.ssl is True:      acc["imap"]["ssl"] = True

    if any([args.spam, args.important, args.newsletter, args.projet, args.basse, args.quarantine]):
        pwd = Path(acc["imap"]["password_file"]).read_text().strip()
        with IMAPClient(acc["imap"]["host"], port=acc["imap"]["port"], ssl=acc["imap"].get("ssl",True)) as srv:
            srv.login(acc["imap"]["user"], pwd)
            delim, has_inbox_ns, existing = detect_mailbox_style(srv)
            def n(s): return normalize_folder(s, delim, has_inbox_ns) if s else None
            if args.spam:       acc["folders"]["spam"] = n(args.spam)
            t = acc["folders"].setdefault("targets", {})
            if args.important:  t["important"]   = n(args.important)
            if args.newsletter: t["newsletter"]  = n(args.newsletter)
            if args.projet:     t["projet"]      = n(args.projet)
            if args.basse:      t["basse"]       = n(args.basse)
            if args.quarantine: t["quarantine"]  = n(args.quarantine)
            to_create = [acc["folders"].get("spam")] + list(t.values())
            to_create = [x for x in to_create if x]
            if not args.no_create_folders:
                created = ensure_folders(srv, to_create, existing)
                if created:
                    print("[OK] Created folders:", ", ".join(created))

    acc.setdefault("mode", {})
    if args.auto_move: acc["mode"]["auto_move"] = True
    if args.no_move:   acc["mode"]["auto_move"] = False
    if args.auto_spam: acc["mode"]["auto_spam"] = True
    if args.no_spam:   acc["mode"]["auto_spam"] = False

    targets = acc.get("folders", {}).setdefault("targets", {})
    spam_folder = acc.get("folders", {}).get("spam")
    quarantine_folder = targets.get("quarantine")
    types_path = ensure_mail_types(args.name, targets, spam_folder, quarantine_folder, acc.get("mail_types_config"))
    acc["mail_types_config"] = str(types_path)

    if args.rotate_password:
        secret_path = Path(acc["imap"]["password_file"])
        SECRETS_DIR.mkdir(parents=True, exist_ok=True)
        if not secret_path.parent.exists():
            secret_path = SECRETS_DIR / f"{args.name}.pass"
            acc["imap"]["password_file"] = str(secret_path)
        pwd = getpass.getpass("New IMAP password: ")
        test_imap(acc["imap"]["host"], acc["imap"]["port"], acc["imap"]["ssl"], acc["imap"]["user"], pwd)
        secret_path.write_text(pwd); os.chmod(secret_path, 0o600)
        print("[OK] Password updated.")

    save_cfg(cfg); print(f"[OK] Account '{args.name}' updated.")

def remove_account(args):
    cfg = load_cfg(); idx, acc = find_acc(cfg, args.name)
    if acc is None:
        print(f"Account '{args.name}' not found.", file=sys.stderr); sys.exit(2)
    secret = acc["imap"].get("password_file")
    types_cfg = acc.get("mail_types_config")
    del cfg["accounts"][idx]; save_cfg(cfg)
    if args.delete_secret and secret:
        try: Path(secret).unlink(); print(f"[OK] Secret removed: {secret}")
        except FileNotFoundError: pass
    if types_cfg:
        try:
            Path(types_cfg).unlink()
            print(f"[OK] Mail types config removed: {types_cfg}")
        except FileNotFoundError:
            pass
    print(f"[OK] Account '{args.name}' removed.")

def list_accounts(_args):
    cfg = load_cfg(); accs = cfg.get("accounts",[])
    if not accs: print("(no accounts)"); return
    for a in accs:
        t = a.get("folders",{}).get("targets",{})
        print(f"- {a['name']}: {a['imap']['user']} @ {a['imap']['host']}:{a['imap']['port']} "
              f"ssl={a['imap'].get('ssl',True)} auto_move={a.get('mode',{}).get('auto_move',False)} "
              f"auto_spam={a.get('mode',{}).get('auto_spam',False)} "
              f"[Spam={a['folders'].get('spam')}, Important={t.get('important')}, "
              f"Promotions={t.get('newsletter')}, Social={t.get('basse')}, "
              f"Projects={t.get('projet')}, Quarantine={t.get('quarantine')}]")
        if a.get("mail_types_config"):
            print(f"    mail_types_config={a['mail_types_config']}")

def test_account(args):
    cfg = load_cfg(); _idx, acc = find_acc(cfg, args.name)
    if acc is None:
        print(f"Account '{args.name}' not found.", file=sys.stderr); sys.exit(2)
    user=acc["imap"]["user"]; host=acc["imap"]["host"]; port=acc["imap"]["port"]; ssl=acc["imap"].get("ssl",True)
    pwd = Path(acc["imap"]["password_file"]).read_text().strip()
    test_imap(host, port, ssl, user, pwd)
    print(f"[OK] IMAP connection for '{args.name}' succeeded.")

def main():
    ap = argparse.ArgumentParser(description="Account management for RPi-MailAI")
    sub = ap.add_subparsers(dest="cmd", required=True)

    ap_add = sub.add_parser("add", help="Add an IMAP account (creates/normalizes folders)")
    ap_add.add_argument("name", help="Internal account name (e.g., work, personal2)")
    ap_add.add_argument("--user", required=True, help="IMAP username (email)")
    ap_add.add_argument("--host", required=True, help="IMAP server hostname (required)")
    ap_add.add_argument("--port", default=993)
    ap_add.add_argument("--no-ssl", action="store_true", help="Disable SSL (not recommended)")
    ap_add.add_argument("--password", help="IMAP password (otherwise prompt)")
    ap_add.add_argument("--spam", help="Spam folder (default: Junk)")
    ap_add.add_argument("--important", help="Important folder (default: Important)")
    ap_add.add_argument("--newsletter", help="Promotions/newsletters folder (default: Promotions)")
    ap_add.add_argument("--projet", help="Projects folder (default: Projects)")
    ap_add.add_argument("--basse", help="Low priority / SocialNetwork folder (default: SocialNetwork)")
    ap_add.add_argument("--quarantine", help="Quarantine/review folder (default: AI/A-REVIEW)")
    ap_add.add_argument("--no-create-folders", action="store_true", help="Do not auto-create missing folders")
    ap_add.add_argument("--auto-move", action="store_true", help="Enable automatic moves (otherwise cold mode)")
    ap_add.add_argument("--auto-spam", action="store_true", help="Allow automatic move to Spam when over threshold")
    ap_add.set_defaults(func=add_account)

    ap_up = sub.add_parser("update", help="Update an account or folder mapping")
    ap_up.add_argument("name")
    ap_up.add_argument("--user"); ap_up.add_argument("--host"); ap_up.add_argument("--port")
    sslgrp = ap_up.add_mutually_exclusive_group()
    sslgrp.add_argument("--ssl", action="store_true"); sslgrp.add_argument("--no-ssl", action="store_true")
    ap_up.add_argument("--spam"); ap_up.add_argument("--important"); ap_up.add_argument("--newsletter")
    ap_up.add_argument("--projet"); ap_up.add_argument("--basse"); ap_up.add_argument("--quarantine")
    ap_up.add_argument("--no-create-folders", action="store_true", help="Do not auto-create missing folders")
    ap_up.add_argument("--auto-move", action="store_true"); ap_up.add_argument("--no-move", action="store_true")
    ap_up.add_argument("--auto-spam", action="store_true"); ap_up.add_argument("--no-spam", action="store_true")
    ap_up.add_argument("--rotate-password", action="store_true", help="Change password (tests live)")
    ap_up.set_defaults(func=update_account)

    ap_rm = sub.add_parser("remove", help="Remove an account")
    ap_rm.add_argument("name")
    ap_rm.add_argument("--delete-secret", action="store_true", help="Also delete stored secret file")
    ap_rm.set_defaults(func=remove_account)

    ap_ls = sub.add_parser("list", help="List accounts"); ap_ls.set_defaults(func=list_accounts)
    ap_test = sub.add_parser("test", help="Test IMAP connection for an account")
    ap_test.add_argument("name"); ap_test.set_defaults(func=test_account)

    args = ap.parse_args(); args.func(args)

if __name__ == "__main__": main()
